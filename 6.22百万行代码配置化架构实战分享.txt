报告人：刘志伟，百度技术改建

1.搜索引擎代码设计	代码级改进（影响有限）
2.配置化架构		架构级改进（大规模改进）

技术改进：最终要看解决了哪些业务问题，而不能为了技术而技术（代价：投入和收益不符合）

一、搜索引擎模块改进
	1.“高速路上换车轮”
	2.找到领域模型，重构复杂度
	背景：搜索引擎：
		1.抓取网页分析网页存储逆向索引
		2.用用户关键字搜索网页结果
	三层架构：
		用户输入层
		逻辑控制层
		网页存储交互数据转换层
	核心模块：Advanced control百度检索最核心的模块：
		1.扩展关键字
		2.网页排序过滤摘要
	核心模块功能：
		1.变换关键字（query modeling and tokenization）
		2.关键字符合结果（recall）
	问题：多次回滚->分析近期roll back：过度耦合
	40w C++代码，变动非常频繁：10story per week, 200 people per year
	cannot simply folking: cannot meet requirement adjucement->”高速路上换车轮“
		1.小步快跑
			每天频繁check in每天三次以上，完备的自动化测试（重构之前需要构建安全网）模块、系统、性能测试等，自动化测试成功再发布
			adv:代码更改能被他人即使看到，能够在高速迭代的时候重构代码，避免大型merge带来大量问题
		2.演进式设计
			期望看到一个预先设计好的代码设计
			但并不清楚最终重构的代码结果：原因：很难在段时间内透彻所有业务，透彻业务的负责人不负责代码
			只有一个大目标：高内聚低耦合
			从一个点开始：clean code
			三层次发展：
				1.clean code。代码可读易懂，函数层次抽象，隐藏实现细节，避免意图和实现细节耦合，避免代码级甚至功能级的重复->用同样的组建替代
				2.单一职责、正交设计、关注点分离，关注点方向不同而分离-->高内聚低耦合
				3.架构层次服务化、领域驱动设计
			上面都是表面，深层次的抽象是软件模型要向业务模型上靠
				偶发成本：实际实现比最简方案多出来的成本
